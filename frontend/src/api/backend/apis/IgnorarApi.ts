/* tslint:disable */
/* eslint-disable */
/**
 * Tercer Parcial - API REST. Ingeniería Web
 * José Luis Bueno Pachón.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EditUsuario,
  EditVivienda,
  HTTPValidationError,
  NewUsuario,
  NewVivienda,
  Usuario,
  Vivienda,
} from '../models';
import {
    EditUsuarioFromJSON,
    EditUsuarioToJSON,
    EditViviendaFromJSON,
    EditViviendaToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    NewUsuarioFromJSON,
    NewUsuarioToJSON,
    NewViviendaFromJSON,
    NewViviendaToJSON,
    UsuarioFromJSON,
    UsuarioToJSON,
    ViviendaFromJSON,
    ViviendaToJSON,
} from '../models';

export interface DeleteHouseRequest {
    id: string;
}

export interface DeleteUserRequest {
    id: string;
}

export interface EditHouseRequest {
    id: string;
    editVivienda: EditVivienda;
}

export interface EditUserRequest {
    id: string;
    editUsuario: EditUsuario;
}

export interface GetHouseByIdRequest {
    id: string;
}

export interface GetUserByFilterRequest {
    nombre?: string;
    email?: string;
}

export interface GetUserByIdRequest {
    id: string;
}

export interface NewHouseRequest {
    newVivienda: NewVivienda;
}

export interface NewUserRequest {
    newUsuario: NewUsuario;
}

/**
 * 
 */
export class IgnorarApi extends runtime.BaseAPI {

    /**
     * Delete House
     */
    async deleteHouseRaw(requestParameters: DeleteHouseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteHouse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/viviendas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete House
     */
    async deleteHouse(requestParameters: DeleteHouseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteHouseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete User
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/usuarios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete User
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit House
     */
    async editHouseRaw(requestParameters: EditHouseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vivienda>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editHouse.');
        }

        if (requestParameters.editVivienda === null || requestParameters.editVivienda === undefined) {
            throw new runtime.RequiredError('editVivienda','Required parameter requestParameters.editVivienda was null or undefined when calling editHouse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/viviendas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditViviendaToJSON(requestParameters.editVivienda),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViviendaFromJSON(jsonValue));
    }

    /**
     * Edit House
     */
    async editHouse(requestParameters: EditHouseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vivienda> {
        const response = await this.editHouseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit User
     */
    async editUserRaw(requestParameters: EditUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Usuario>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editUser.');
        }

        if (requestParameters.editUsuario === null || requestParameters.editUsuario === undefined) {
            throw new runtime.RequiredError('editUsuario','Required parameter requestParameters.editUsuario was null or undefined when calling editUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/usuarios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditUsuarioToJSON(requestParameters.editUsuario),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsuarioFromJSON(jsonValue));
    }

    /**
     * Edit User
     */
    async editUser(requestParameters: EditUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Usuario> {
        const response = await this.editUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get House
     */
    async getHouseByIdRaw(requestParameters: GetHouseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vivienda>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getHouseById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/viviendas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViviendaFromJSON(jsonValue));
    }

    /**
     * Get House
     */
    async getHouseById(requestParameters: GetHouseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vivienda> {
        const response = await this.getHouseByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Houses
     */
    async getHousesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Vivienda>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/viviendas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ViviendaFromJSON));
    }

    /**
     * Get Houses
     */
    async getHouses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Vivienda>> {
        const response = await this.getHousesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get User By Filter
     */
    async getUserByFilterRaw(requestParameters: GetUserByFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Usuario>>> {
        const queryParameters: any = {};

        if (requestParameters.nombre !== undefined) {
            queryParameters['nombre'] = requestParameters.nombre;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/usuarios`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsuarioFromJSON));
    }

    /**
     * Get User By Filter
     */
    async getUserByFilter(requestParameters: GetUserByFilterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Usuario>> {
        const response = await this.getUserByFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get User
     */
    async getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Usuario>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/usuarios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsuarioFromJSON(jsonValue));
    }

    /**
     * Get User
     */
    async getUserById(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Usuario> {
        const response = await this.getUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create House
     */
    async newHouseRaw(requestParameters: NewHouseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vivienda>> {
        if (requestParameters.newVivienda === null || requestParameters.newVivienda === undefined) {
            throw new runtime.RequiredError('newVivienda','Required parameter requestParameters.newVivienda was null or undefined when calling newHouse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/viviendas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewViviendaToJSON(requestParameters.newVivienda),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ViviendaFromJSON(jsonValue));
    }

    /**
     * Create House
     */
    async newHouse(requestParameters: NewHouseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vivienda> {
        const response = await this.newHouseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create User
     */
    async newUserRaw(requestParameters: NewUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Usuario>> {
        if (requestParameters.newUsuario === null || requestParameters.newUsuario === undefined) {
            throw new runtime.RequiredError('newUsuario','Required parameter requestParameters.newUsuario was null or undefined when calling newUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/usuarios`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewUsuarioToJSON(requestParameters.newUsuario),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsuarioFromJSON(jsonValue));
    }

    /**
     * Create User
     */
    async newUser(requestParameters: NewUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Usuario> {
        const response = await this.newUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
